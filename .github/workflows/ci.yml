name: CI & Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

# Cancel in-progress runs on the same branch when a new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  contracts:
    name: "Contracts CI"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      FOUNDRY_PROFILE: ci

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          cache: true

      - name: Show Foundry Version
        run: forge --version

      - name: Install Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Bun Dependencies
        run: bun install solhint
        working-directory: ./contracts

      - name: Run Linter (Solhint)
        run: |
          bunx --bun solhint --config .solhint.json 'src/**/*.sol'
          bunx --bun solhint --config .solhint.other.json '{test,script}/**/*.sol'
        working-directory: ./contracts

      - name: Check Formatting (Forge Fmt)
        run: forge fmt --check
        working-directory: ./contracts

      - name: Run Static Analyzer (Slither)
        uses: crytic/slither-action@v0.4.1
        with:
          node-version: 20
          slither-args: --config-file slither.config.json
          sarif: slither-results.sarif
          fail-on: medium # Or 'high' depending on the policy
        continue-on-error: true # Optional: Set to false to fail the build on findings

      - name: Run Forge Build
        run: forge build --sizes
        working-directory: ./contracts

      - name: Run Forge Tests
        run: forge test -vvv --gas-report
        env:
          API_KEY_INFURA: ${{ secrets.API_KEY_INFURA }}
          API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
        working-directory: ./contracts

      - name: Upload Contract Artifacts
        if: github.ref == 'refs/heads/main' # Only upload artifacts from main branch
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: ./contracts/out

  bindings:
    name: "Bindings CI"
    runs-on: ubuntu-latest
    needs: contracts
    timeout-minutes: 30
    env:
      # These are likely needed for integration tests that run against a live network
      PROTOCOL_ADAPTER_ADDRESS_SEPOLIA: ${{ vars.PROTOCOL_ADAPTER_ADDRESS_SEPOLIA }}
      API_KEY_INFURA: ${{ secrets.API_KEY_INFURA }}
      API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Contract Artifacts
        uses: actions/download-artifact@v4
        with:
          name: contract-artifacts
          path: ./contracts/out

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - name: Show Rust Version
        run: rustc --version

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./bindings/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('bindings/Cargo.lock') }}

      - name: Check Formatting (Cargo Fmt)
        run: cargo fmt -- --check
        working-directory: ./bindings

      - name: Build Bindings
        run: cargo build --release
        working-directory: ./bindings

      - name: Run Bindings Tests
        run: cargo test --verbose
        working-directory: ./bindings
