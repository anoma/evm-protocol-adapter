module ERC20Resource;

import Stdlib.Prelude open;
import Applib open;

import MagicNumbers open;
import Types open;

isAuthorizedBy
  (signer : ExternalIdentity) (origin : Nat) (publicInputs : Instance) : Bool :=
  todo;

{- LOGIC -}

logic (publicInputs : Instance) (privateInputs : Witness) : Bool :=
  let
    tag := Instance.tag publicInputs;
    customInputs := Witness.customInputs privateInputs;
  in if
    {- ERC20 resource consumed -}
    | isNullifier tag :=
      case findResourceByNullifier tag privateInputs of {
        | nothing := false
        | just self :=
          if
            {- initializing consumption -}
            | Resource.ephemeral self := initializationLogic
            {- conventional consumption -}
            | else := consumptionLogic tag self publicInputs
      }
    {- ERC20 resource created -}
    | isCommitment tag :=
      case findResourceByCommitment tag privateInputs of {
        | nothing := false
        | just self :=
          if
            {- finalizing creation -}
            | Resource.ephemeral self := finalizationLogic
            {- conventional creation -}
            | else := creationLogic
      }
    | else := false;

--- Requires a W
initializationLogic : Bool := todo;

finalizationLogic : Bool := todo;

--- Transferable token logic
consumptionLogic
  (tag : Nat) (self : Resource) (publicInputs : Instance) : Bool :=
  isAuthorizedBy@{
    signer := owner self;
    origin := tag;
    publicInputs;
  };

creationLogic : Bool := true;

{- RESOURCE -}

mkErc20Resource
  (erc20Token : Address)
  (wrapperContract : Address)
  (owner : ExternalIdentity)
  (quantity : Nat)
  (nonce : Nat)
  {nkc : NullifierKeyCommitment := Universal.nullifierKeyCommitment}
  {ephemeral : Bool := false}
  : Resource :=
  mkResource@{
    logic;
    label := builtinAnomaEncode (wrapperContract, erc20Token);
    value := builtinAnomaEncode owner;
    quantity;
    ephemeral;
    nullifierKeyCommitment := builtinAnomaEncode (nkc);
    nonce;
    randSeed := 0;
  };

{- HELPERS -}

owner (resource : Resource) : ExternalIdentity :=
  resource |> Resource.value |> builtinAnomaDecode;
